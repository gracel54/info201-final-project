"oSearch": { "bSmart": false, "bRegex": true }
test <- split(representative)
test
first_name <- "Rick"
last_name <- "Larsen"
test <- data.frame(first_name, last_name)
test
representative_df <- propub_data %>%
filter(first_name == desired_first_name, last_name == desired_last_name)
desired_first_name <- "Rick"
desired_last_name <- "Larsen"
representative_df <- propub_data %>%
filter(first_name == desired_first_name, last_name == desired_last_name)
birthday <- as.Date(representative_df$date_of_birth)
birthday
today <- as.Date(Sys.date)
today <- as.Date(Sys.date())
today - birthday
today <- as.Date(lubridate::Sys.date())
today <- as.Date(Sys.date())
today <- as.Date(Sys.Date())
today$year
today <- as.Date(Sys.Date())
dates <- c(today, birthday)
substring(dates,1,4)
class(years)
years <- substring(dates,1,4)
class(years)
years[1]
state_data[, first_name, middle_name, last_name]
state_data[, (first_name, middle_name, last_name)]
drops <- c("first_name", "middle_name", "last_name")
state_data[, !(names(state_data) %in% drops)]
View(state_data)
state_national_df <- state_data %>%
select(Name, title, phone, party) %>%
mutate(photo = NA) %>%
left_join(adjusted_df)
View(state_national_df)
state_national_df <- state_data %>%
select(Name, title, phone, party) %>%
mutate(photo = NA) %>%
full_join(adjusted_df)
years[1] - years[2]
years[1]
as.numeric(years)
years <- as.numeric(years)
years[1]
years[1] - years[2]
years <- as.Numeric(substring(dates,1,4))
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
is.na() <- ""
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
adjusted_df[is.na(adjusted_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(ifelse(photoUrl != " ",
photoUrl = paste0("![](", photoUrl, ")")))
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
adjusted_df[is.na(adjusted_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(photo = ifelse(photoUrl != " ",
paste0("![](", photoUrl, ")")))
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
View(adjusted_df)
adjusted_df[is.na(adjusted_df)] <- " "
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(photo = ifelse(photoUrl != " ",
paste0("![](", photoUrl, ")")))
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(Photo = ifelse(photoUrl != " ",
paste0("![](", photoUrl, ")")))
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(Photo = case_when(photoUrl != " "
~ paste0("![](", photoUrl, ")")))
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- "-"
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(photoUrl = case_when(photoUrl != "-"
~ paste0("![](", photoUrl, ")")))
adjusted_df[is.na(joined_df)] <- "-"
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = "-")
joined_df[is.na(joined_df)] <- "-"
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(photoUrl = case_when(photoUrl != "-"
~ paste0("![](", photoUrl, ")")))
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
adjusted_df[is.na(joined_df)] <- "-"
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = "-")
joined_df[is.na(joined_df)] <- "-"
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(photoUrl = case_when(photoUrl != "-"
~ paste0("![](", photoUrl, ")")))
adjusted_df[is.na(adjusted_df)] <- "-"
View(adjusted_df)
joined_df$address
joined_df[is.na(joined_df)] <- "-"
View(joined_df)
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = "-")
joined_df[is.na(joined_df)] <- "-"
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(photoUrl = case_when(photoUrl != "-"
~ paste0("![](", photoUrl, ")")))
View(adjusted)df
View(adjusted_df)
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = "-")
joined_df[is.na(joined_df)] <- "-"
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(Photo = case_when(photoUrl != "-"
~ paste0("![](", photoUrl, ")")))
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , "-") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(Photo = case_when(photoUrl != " "
~paste0("![](", photoUrl, ")")))
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
View(adjusted_df)
names(adjusted_df)
knitr::kable(adjusted_df)
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , " ") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(Photo = case_when(photoUrl != " "
~ paste0("![](", photoUrl, ")")))
colnames(adjusted_df) <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joined_df$address <- sapply(joined_df$address, paste, collapse = " ")
joined_df[is.na(joined_df)] <- " "
adjusted_df <- joined_df %>%
replace(.=="NULL" , " ") %>%
select(name, position, party, emails, phones, photoUrl) %>%
mutate(Photo = case_when(photoUrl != " "
~ paste0("![](", photoUrl, ")"))) %>%
select(-photoUrl)
adjusted_df[is.na(adjusted_df)] <- " "
View(representative_df)
getwd()
test <- data.table::fread("./info201/a7-collaboration-a7-collaboration")
View(test)
test <- read.csv("./info201/a7-collaboration-a7-collaboration")
test <- read.csv("./info201/a7-collaboration-a7-collaboration/data/UFOCoords.csv")
View(test)
Sys.info()
install.packages(shiny)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("11_timer")
setwd("./info201/info201-final-project")
data <- read.csv(countries.csv, stringsAsFactors = FALSE)
data <- read.csv("countries.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("countries.csv", stringsAsFactors = FALSE, sep = /t)
data <- data.table::fread(countries.csv)
data <- data.table::fread("countries.csv")
View(data)
class(data)
levels(data)
country_data <- data.table::fread("countries.csv")
internet_data <- country_data %>%
select(Country, GDP)
library(dplyr)
country_data <- data.table::fread("countries.csv")
internet_data <- country_data %>%
select(Country, GDP)
View(internet_data)
internet_data <- country_data %>%
select(Country, `GDP - real growth rate(%)`, `GDP - per capita`,
`Telephones - main lines in use`,
`Telephones - mobile cellular`,
`Internet hosts`, `Internet users`)
internet_data <- country_data %>%
select(Country, `GDP - real growth rate(%)`, `GDP - per capita`,
`Telephones - main lines in use`,
`Telephones - mobile cellular`,
`Internet hosts`, `Internet users`,
`Electricity - consumption(kWh)`,
`Electricity - production(kWh)`)
getwd()
countries <- c('USA', 'Canada', 'Mexico')
datastats <- c('electricity', 'GDP', 'phone')
source("./scripts/startfuncs.R")
View(data)
source("./scripts/startfuncs.R")
yeet <- get_10_countries()
source(startfuncs.R)
source(./scripts/startfuncs.R)
source("./scripts/startfuncs.R")
raw_data <- data.table::fread("countries.csv")
## select only columns we are interested in, and delete all the blank data
## "data" is now data table of 9columns: country, e cons + pro, gdp per cap + growth, internet hosts + users, telephone line + cellular
data <- raw_data %>%
filter(Country != "String") %>%
select(Country, `Electricity - consumption(kWh)`, `Electricity - production(kWh)`, `GDP - per capita`, `GDP - real growth rate(%)`, `Internet hosts`, `Internet users`, `Telephones - main lines in use`, `Telephones - mobile cellular`) %>%
filter(`Electricity - consumption(kWh)` != "") %>%
filter(`Electricity - production(kWh)` != "") %>%
filter(`GDP - per capita` != "") %>%
filter(`GDP - real growth rate(%)` != "") %>%
filter(`Internet hosts` != "") %>%
filter(`Internet users` != "") %>%
filter(`Telephones - main lines in use` != "") %>%
filter(`Telephones - mobile cellular` != "")
## here we rank the countries based on multiple aspects
new_data <- data %>%
mutate(elec_gap = as.numeric(as.character(`Electricity - production(kWh)`))- as.numeric(as.character(`Electricity - consumption(kWh)`))) %>%
arrange(desc(elec_gap)) %>%
mutate(ele_rank = 1:nrow(new_data)) %>% ## ele_rank: rank from highest [electrivity production - consumption] downwards
mutate(gdp = as.numeric(as.character(`GDP - per capita`)) * as.numeric(as.character(`GDP - real growth rate(%)`))) %>%
arrange(desc(gdp)) %>%
mutate(gdp_rank = 1:nrow(new_data)) %>% ## gdp_rank: rank from highest gdp per cap * growth rate downwards
mutate(net_ratio = as.numeric(as.character(`Internet hosts`)) / as.numeric(as.character(`Internet users`))) %>%
arrange(desc(net_ratio)) %>%
mutate(net_rank = 1:nrow(new_data)) %>% ## net_rank: rank from highest internet host per user downwards
mutate(phone_ratio = as.numeric(as.character(`Telephones - mobile cellular`)) / as.numeric(as.character(`Telephones - main lines in use`))) %>%
arrange(phone_ratio) %>%
mutate(phone_rank = 1:nrow(new_data)) ## phone_rank: rank from lowest cellular phone usage compare to mainline upwards
## here we rank the countries based on multiple aspects
new_data <- data %>%
mutate(elec_gap = as.numeric(as.character(`Electricity - production(kWh)`))- as.numeric(as.character(`Electricity - consumption(kWh)`))) %>%
arrange(desc(elec_gap)) %>%
mutate(ele_rank = 1:nrow(new_data)) %>% ## ele_rank: rank from highest [electrivity production - consumption] downwards
mutate(gdp = as.numeric(as.character(`GDP - per capita`)) * as.numeric(as.character(`GDP - real growth rate(%)`))) %>%
arrange(desc(gdp)) %>%
mutate(gdp_rank = 1:nrow(new_data)) %>% ## gdp_rank: rank from highest gdp per cap * growth rate downwards
mutate(net_ratio = as.numeric(as.character(`Internet hosts`)) / as.numeric(as.character(`Internet users`))) %>%
arrange(desc(net_ratio)) %>%
mutate(net_rank = 1:nrow(new_data)) %>% ## net_rank: rank from highest internet host per user downwards
mutate(phone_ratio = as.numeric(as.character(`Telephones - mobile cellular`)) / as.numeric(as.character(`Telephones - main lines in use`))) %>%
arrange(phone_ratio) %>%
mutate(phone_rank = 1:nrow(new_data)) ## phone_rank: rank from lowest cellular phone usage compare to mainline upwards
library(dplyr)
## here we rank the countries based on multiple aspects
new_data <- data %>%
mutate(elec_gap = as.numeric(as.character(`Electricity - production(kWh)`))- as.numeric(as.character(`Electricity - consumption(kWh)`))) %>%
arrange(desc(elec_gap)) %>%
mutate(ele_rank = 1:nrow(new_data)) %>% ## ele_rank: rank from highest [electrivity production - consumption] downwards
mutate(gdp = as.numeric(as.character(`GDP - per capita`)) * as.numeric(as.character(`GDP - real growth rate(%)`))) %>%
arrange(desc(gdp)) %>%
mutate(gdp_rank = 1:nrow(new_data)) %>% ## gdp_rank: rank from highest gdp per cap * growth rate downwards
mutate(net_ratio = as.numeric(as.character(`Internet hosts`)) / as.numeric(as.character(`Internet users`))) %>%
arrange(desc(net_ratio)) %>%
mutate(net_rank = 1:nrow(new_data)) %>% ## net_rank: rank from highest internet host per user downwards
mutate(phone_ratio = as.numeric(as.character(`Telephones - mobile cellular`)) / as.numeric(as.character(`Telephones - main lines in use`))) %>%
arrange(phone_ratio) %>%
mutate(phone_rank = 1:nrow(new_data)) ## phone_rank: rank from lowest cellular phone usage compare to mainline upwards
source("./scripts/startfuncs.R")
getwd()
ls
source("./scripts/startfuncs.R")
source("./scripts/startfuncs.R")
source("./scripts/startfuncs.R")
yeet <- get_10_countries()
View(yeet)
nrow(yeet)
colnames(yeet)
rownames(yeet)
yeet$Coutnry
yeet$Country
dataset <- get_10_countries()
datastats <- colnames(dataset)
countries <- dataset$Country
View(dataset)
rm(yeet)
View(mpg)
mpg
source(data.R)
source("data.R")
head(mpg)
library(tidyverse)
install.package(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
mpg
View(mpg)
class(countries)
shiny::runApp('scripts')
setwd()
getwd()
getwd()
runApp('scripts')
runApp('scripts')
View(countries)
countries[1]
View(datastats)
runApp('scripts')
View(datastats)
datastats[1]
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
View(Titanic)
runApp('scripts')
runApp('scripts')
runApp('scripts')
countries
countries[1]
class(dataset$gdp[1])
class(dataset$`GDP - per capita`[1])
runApp('scripts')
desired_stat <- gdp
desired_stat <- "gdp"
dataset$desired_stat
subset(dataset, desired_stat)
runApp('scripts')
dataset[desired_stat]
dataset$Country
runApp('scripts')
dataset[Country]
runApp('scripts')
hm <- dataset[desired_stat]
class(hm)
as.list(hm)
runApp('scripts')
dataset[desired_stat]
dataset[desired_stat][1]
hm[1]
hm[3]
stat_list <- as.list(dataset[desired_stat])
test <- as.numeric(unlist(a))
test <- as.numeric(unlist(stat_list))
class(test)
test
runApp('scripts')
countries
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
dataset <- get_10_countries()
View(dataset)
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
test <- dataset %>%
filter(Country = "Canada")
test <- dataset %>%
filter(Country == "Canada")
test
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
